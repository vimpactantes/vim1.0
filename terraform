#! /bin/sh
rm -f terraform
#CLOUDFLARE
cat <<EOF >> $MYDOMAIN/cloudflare.tf
provider "cloudflare" {
  version = "~> 2.0"
  email   = var.cloudflare_email
  api_key = var.cloudflare_api_key
}
resource "cloudflare_zone" "zone" {
    zone = "$MYDOMAIN"
    plan = "free"
}
resource "cloudflare_record" "dominio" {
  zone_id = cloudflare_zone.zone.id
  name    = "@"
  value   = aws_eip.A_IP-del-Servidor.public_ip
  type    = "A"
  ttl     = 1
  proxied = false
}
resource "cloudflare_record" "servidor" {
  zone_id = cloudflare_zone.zone.id
  name    = "servidor"
  value   = aws_eip.A_IP-del-Servidor.public_ip
  type    = "A"
  ttl     = 1
  proxied = false
}
resource "cloudflare_record" "www" {
  zone_id = cloudflare_zone.zone.id
  name    = "www"
  value   = "$MYDOMAIN"
  type    = "CNAME"
  ttl     = 1
  proxied = false
}
resource "cloudflare_zone_settings_override" "test" {
  zone_id = cloudflare_zone.zone.id
  settings {
    brotli = "on"
    always_use_https = "on"
    rocket_loader = "on"
    challenge_ttl = 2700
    security_level = "high"
    opportunistic_encryption = "on"
    automatic_https_rewrites = "on"
    ssl = "full"
    browser_cache_ttl = 86400
    hotlink_protection = "on"
    minify {
      css = "on"
      js = "on"
      html = "on"
    }
    security_header {
      enabled = true
      preload = true
      max_age = 15552000
      include_subdomains = true
      nosniff = true
    }
  }
}
EOF

#CLOUDFLARE-VARS
cat <<EOF >> $MYDOMAIN/cloudflare_var.tf
variable "cloudflare_email" {}
variable "cloudflare_api_key" {}
EOF

#EC2
cat <<EOF >> $MYDOMAIN/ec2.tf
# Specify the provider and access details
provider "aws" {
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  region = var.aws_region
}
resource "aws_security_group" "sg-ec2" {
  name        = "sg_ec2-web"
  description = "Grupo de Seguridad para \${var.dominio}"
  tags        = {Name = "sg_ec2-\${var.server}"}
# SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  # HTTP access from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    ipv6_cidr_blocks = ["::/0"]
  }
  # outbound internet access
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    ipv6_cidr_blocks = ["::/0"]
  }
  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
# IMAGE
data "aws_ami" "centos" {
owners      = ["679593333241"]
most_recent = true
  filter {
      name   = "name"
      values = ["CentOS Linux 7 x86_64 HVM EBS *"]
  }
  filter {
      name   = "architecture"
      values = ["x86_64"]
  }
  filter {
      name   = "root-device-type"
      values = ["ebs"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}
# KEYPAIR
resource "aws_key_pair" "auth" {
  key_name   = "$MYSERVER"
  public_key = file("~/.ingress/$MYSERVER.pub")
}
# INSTANCE
resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.web.id
  allocation_id = aws_eip.A_IP-del-Servidor.id
}
resource "aws_instance" "web" {
  ami               = data.aws_ami.centos.id
  instance_type     = var.instance_type
  key_name          = aws_key_pair.auth.id
  security_groups   = ["\${aws_security_group.sg-ec2.name}"]
  availability_zone = "\${var.aws_region}a"
  root_block_device {
    volume_type = "gp2"
    volume_size = "30"
    delete_on_termination = "true"
    }
  connection {
    type = "ssh"
    user = "centos"
    private_key = file("~/.ingress/$MYSERVER.pem")
    host = aws_instance.web.public_ip
    agent = false
  }
  provisioner "file" {
    source      = ".sh/sh.sh"
    destination = "/home/centos/sh.sh"
  }
  provisioner "file" {
    source      = ".sh/vim"
    destination = "/home/centos/vim"
  }
  provisioner "file" {
    source      = ".sh/centmin"
    destination = "/home/centos/centmin"
  }
  provisioner "file" {
    source      = ".sh/wordpress"
    destination = "/home/centos/wordpress"
  }
  provisioner "file" {
    source      = ".sh/addwphost.sh"
    destination = "/home/centos/addwphost.sh"
  }
  provisioner "file" {
    source      = ".sh/ssllabs.sh"
    destination = "/home/centos/ssllabs.sh"
  }
  provisioner "file" {
    source      = ".sh/centminmod.sh"
    destination = "/home/centos/centminmod.sh"
  }
  provisioner "file" {
    source      = ".sh/restart.sh"
    destination = "/home/centos/restart.sh"
  }
  provisioner "file" {
    source      = ".sh/bk-local.sh"
    destination = "/home/centos/bk-local.sh"
  }
  provisioner "file" {
    source      = ".sh/ejecutelocal.sh"
    destination = "/home/centos/ejecutelocal.sh"
  }
  provisioner "file" {
    source      = ".sh/wordpress.sh"
    destination = "/home/centos/wordpress.sh"
  }
  provisioner "file" {
    source      = ".sh/permisos.sh"
    destination = "/home/centos/permisos.sh"
  }
  provisioner "file" {
    source      = ".sh/createbak.sh"
    destination = "/home/centos/createbak.sh"
  }
  provisioner "file" {
    source      = ".sh/ejecutebak.sh"
    destination = "/home/centos/ejecutebak.sh"
  }
  provisioner "file" {
    source      = ".sh/deletebak.sh"
    destination = "/home/centos/deletebak.sh"
  }
  provisioner "file" {
    source      = ".sh/uninstall.sh"
    destination = "/home/centos/uninstall.sh"
  }
  provisioner "file" {
    source      = ".sh/mysql.sh"
    destination = "/home/centos/mysql.sh"
  }
  provisioner "file" {
    source      = ".sh/hostname.sh"
    destination = "/home/centos/hostname.sh"
  }
  provisioner "remote-exec" {
    inline = [
      "sudo chmod +x /home/centos/sh.sh",
      "sudo /home/centos/sh.sh args",
    ]
  }
  tags = {Name = "\${var.dominio}"}
}
resource "aws_eip" "A_IP-del-Servidor" {
  vpc          = true
}
EOF

#EC2-VAR
cat <<EOF >> $MYDOMAIN/ec2_var.tf
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "aws_region" {
  description = "The AWS region to create things in."
  default     = "us-east-1"
}
variable "dominio" {
  default = "$MYDOMAIN"
}
variable "server" {
  default = "$MYSERVER"
}
variable "key_name" {
  default = "$MYSERVER"
  description = "Name of the SSH keypair to use in AWS"
}
variable "instance_type" {
  default     = "t2.micro"
  description = "AWS instance type"
}
EOF

#OUTPUTS
cat <<EOF >> $MYDOMAIN/outputs.tf
output "A_IP-del-Servidor" {
  value = "\${aws_eip.A_IP-del-Servidor.public_ip}"
}
output "B_Nombres-de-Servidores" {
  value = "\${cloudflare_zone.zone.name_servers}"
}
EOF

rm -f terraform.sh
printf "\033c"
echo "*************************************************************************************************"
echo "***********                                                                           ***********"
echo "***********                         CONSTRUCTOR WEB 'VIM-v1.0'                        ***********"
echo "***********                                                                           ***********"
echo "***********                              ! G E N I A L !                              ***********"
echo "***********                                                                           ***********"
echo "***********        !  E S T A M O S   C R E A N D O   T U   S E R V I D O R  !        ***********"
echo "***********                                                                           ***********"
echo "================================================================================================="
cd ~/$MYDOMAIN/
terraform init
printf "\033c"
echo "*************************************************************************************************"
echo "***********                                                                           ***********"
echo "***********                         CONSTRUCTOR WEB 'VIM-v1.0'                        ***********"
echo "***********                                                                           ***********"
echo "***********                              ! G E N I A L !                              ***********"
echo "***********                                                                           ***********"
echo "***********        !  E S T A M O S   C R E A N D O   T U   S E R V I D O R  !        ***********"
echo "***********                                                                           ***********"
echo "================================================================================================="
#cd ~/$MYDOMAIN/
#terraform apply --auto-approve
